#!/bin/bash

django_version=$1

function create_django_settings() {
mkdir ${project_name}/settings

cat <<EOF >${project_name}/settings/__init__.py
"""
Django settings for ${project_name} project.

Generated by 'django-admin startproject' using Django

"""

import os
import logging
from pathlib import Path
from datetime import timedelta

_config_loaded = False


def load_config():
    global _config_loaded
    if _config_loaded:
        return

    import logging.config
    import os

    logging_level = os.environ.get('LOGGING_LEVEL', 'ERROR')

    # noinspection SpellCheckingInspection
    logger_config = {
        'version': 1,
        'disable_existing_loggers': True,
        'handlers': {
            'console': {
                'level': logging_level,
                'class': 'logging.StreamHandler',
                'formatter': 'simple'
            },
        },
        'formatters': {
            'verbose': {
                'format': '%(levelname)s|%(asctime)s|%(funcName)s --> %(message)s',
                'datefmt': "%d/%b/%Y %H:%M:%S"
            },
            'simple': {
                'format': '%(levelname)s|%(asctime)s --> %(message)s',
                'datefmt': "%d/%b/%Y %H:%M:%S"
            },
        },
        'loggers': {
            'app_logger': {
                'handlers': ['console'],
                'level': logging_level,
                'propagate': False,
            },
        }
    }

    logging.config.dictConfig(logger_config)
    _config_loaded = True


def get_logger():
    if not _config_loaded:
        load_config()

    return logging.getLogger('app_logger')

logger = get_logger()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

if not SECRET_KEY:
    logger.critical(f"Django secret key must be defined in os environment")
    exit(-1)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG')

allowed_host_str = os.environ.get('ALLOWED_HOSTS')
ALLOWED_HOSTS = allowed_host_str.split() if allowed_host_str else []

if not ALLOWED_HOSTS:
    logger.warning('ALLOWED_HOSTS is not defined in os environment.'
                   'It should be a space-delimited url list')

# Users & Authentication
AUTH_USER_MODEL = 'users.User'

# Application definition
DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

LOCAL_APPS = []

THIRD_PARTY_APPS = []

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware'
]

ROOT_URLCONF = '${project_name}.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [(str(BASE_DIR)) + 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = '${project_name}.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

# LANGUAGE_CODE = 'en-us'
LANGUAGE_CODE = 'es'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CORS config
cors_origin_whitelist_str = os.environ.get('CORS_ORIGIN_WHITELIST')
CORS_ORIGIN_WHITELIST = cors_origin_whitelist_str.split() if cors_origin_whitelist_str else []

if not CORS_ORIGIN_WHITELIST:
    logger.warning('CORS_ORIGIN_WHITELIST is not defined in os environment.'
                   'It should be a space-delimited url list')

CORS_ORIGIN_ALLOW_ALL = os.environ.get('CORS_ORIGIN_ALLOW_ALL', None)
CORS_ORIGIN_ALLOW_ALL = True if CORS_ORIGIN_ALLOW_ALL else False

if not CORS_ORIGIN_ALLOW_ALL:
    CORS_ALLOWED_ORIGINS = CORS_ORIGIN_WHITELIST

# CORS_ALLOW_ALL_ORIGINS = True

CORS_ALLOWED_HEADERS = [
    'Authorization',
    'Content-Type',
]

CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]

# Django REST Framework
PAGE_SIZE = int(os.environ.get('PAGE_SIZE', 10))

REST_FRAMEWORK = {

    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],

    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': PAGE_SIZE,
}


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/
STATIC_ROOT = (str(BASE_DIR)) + '/staticfiles/'
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    (str(BASE_DIR)) + '/static/',
]
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder'
]

# Media
MEDIA_ROOT = (str(BASE_DIR)) + '/media/'
MEDIA_URL = '/media/'

# Admin
ADMIN_URL = os.environ.get('ADMIN_URL', 'admin/')
ADMINS = [
("""Leonardo Beroes""", 'leonardoberoes94@gmail.com'),
]
MANAGERS = ADMINS

# Swagger
SWAGGER_SETTINGS = {
    "SECURITY_DEFINITIONS": {
        "JWT [Bearer {JWT}]": {
            "name": "Authorization",
            "type": "apiKey",
            "in": "header",
        }
    },
    "USE_SESSION_AUTH": False,
}

#ROLEPERMISSIONS_MODULE = 'roles_and_permissions.roles'

EOF

cat <<EOF >${project_name}/settings/production.py
"""Production settings."""
from ${project_name}.settings import *

logger.info("--------------USING SETTINGS PRODUCTION--------------")

# Static  files
INSTALLED_APPS += ['storages']
STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },

    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

# Gunicorn
INSTALLED_APPS += ['gunicorn']

# WhiteNoise
MIDDLEWARE.insert(1, 'whitenoise.middleware.WhiteNoiseMiddleware')
WHITENOISE_ROOT = STATIC_ROOT
WHITENOISE_MEDIA_ROOT = MEDIA_ROOT

# Templates
TEMPLATES[0]['APP_DIRS'] = False
TEMPLATES[0]['OPTIONS']['loaders'] = [
    (
        'django.template.loaders.cached.Loader',
        [
            'django.template.loaders.filesystem.Loader',
            'django.template.loaders.app_directories.Loader',
        ]
    ),
]

# Security
SESSION_COOKIE_SECURE = True
SECURE_CONTENT_TYPE_NOSNIFF = True

CSRF_TRUSTED_ORIGINS = CORS_ORIGIN_WHITELIST.copy()
CSRF_USE_SESSIONS = True
CSRF_HEADER_NAME = 'CSRF_COOKIE'
CSRF_COOKIE_SECURE = True
CSRF_COOKIE_SAMESITE = 'Lax'

SECURE_HSTS_SECONDS = 60
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

EOF

SECRET_KEY=$(grep -oP "(?<=SECRET_KEY = ')[^']+" ${project_name}/settings.py)

echo "#SECURITY
SECRET_KEY=$SECRET_KEY
DEBUG=1
LOGGING_LEVEL=DEBUG

# Hosts
ALLOWED_HOSTS=0.0.0.0" > django/development/dev.env

echo "DJANGO_SETTINGS_MODULE=ClaimApi.settings.production

#SECURITY
SECRET_KEY=$SECRET_KEY
#DEBUG=0
LOGGING_LEVEL=DEBUG

# Admin
ADMIN_URL=d0oai32492384h24ui234nij23n4k2jnkjnkjn

# Hosts
ALLOWED_HOSTS=0.0.0.0" > django/production/api.env

rm ${project_name}/settings.py

echo "Settings generated successfully!"
echo -e "\n"
}
